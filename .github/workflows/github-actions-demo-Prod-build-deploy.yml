# This is a basic workflow to help you get started with Actions

name: Deploy to PROD

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the master branch
   workflow_run:
     workflows: ["Merge to MASTER"]
     types: [completed] #requested

  # Allows you to run this workflow manually from the Actions tab
   workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    environment: Prod

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
        with:
          ref: master
      
      #Caches the maven dependencies
      - uses: actions/cache@v1
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-
      
      #Setup JDK
      - name: Set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8
      
      #Maven Build 
      - name: Build with Maven
        run: mvn -B package --file pom.xml

      # Append Artifact name with Commit Hash
      - name: Stamp artifact file name with commit hash
        run: |
          artifactName1=$(ls target/*.jar | head -1)
          commitHash=$(git rev-parse --short "$GITHUB_SHA")
          artifactName2=$(ls target/*.jar | head -1 | sed "s/.jar/-$commitHash.jar/g")
          mv $artifactName1 $artifactName2
          
      - name: Upload artifact 
        uses: actions/upload-artifact@master
        with:
            name: artifacts
            path: target/*.jar
  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment: Prod

    steps:    

    - uses: actions/checkout@v2

    - uses: actions/cache@v1
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-

    - uses: actions/download-artifact@master
      with:
        name: artifacts

    - name: Deploy to PROD
      env:
        ANYPOINT_PROD_USERNAME: ${{ secrets.ANYPOINT_CLIENT_ID_PROD }}
        ANYPOINT_PROD_PASSWORD: ${{ secrets.ANYPOINT_CLIENT_SECRET_PROD }}
        ENV_SUFFIX: prod
        APP_NAME: ${{ github.event.repository.name }}
        
      run: |
        artifactName=$(ls *.jar | head -1)
        mvn deploy -DmuleDeploy \
         -Dmule.artifact=$artifactName \
         -DconnectedApp_clientId="$ANYPOINT_PROD_USERNAME" \
         -DconnectedApp_clientSecret="$ANYPOINT_PROD_PASSWORD" \
         -Dapp.name=$APP_NAME-$ENV_SUFFIX \
         -DgrantType=client_credentials \
         -Dapp.runtime=4.3.0 \
         -Denv=PROD \
         -DskipTests
